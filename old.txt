# from flask import Flask, render_template, jsonify, request
# from flask_sqlalchemy import SQLAlchemy
# from models import db, User
# from dotenv import load_dotenv
# import os
# import razorpay
# import hmac
# import hashlib
# import json


# # Load environment variables
# load_dotenv()

# # Initialize Flask app
# app = Flask(__name__)

# # Configure Flask and SQLAlchemy
# app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL', 'postgresql://postgres:rishabh30@localhost:5432/alsium1_db')
# app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
# app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'goa12L')  # Fallback for development only

# # Initialize SQLAlchemy
# db.init_app(app)

# # Initialize Razorpay client
# RAZORPAY_KEY_ID = os.getenv('RAZORPAY_KEY_ID')
# RAZORPAY_KEY_SECRET = os.getenv('RAZORPAY_KEY_SECRET')
# razorpay_client = razorpay.Client(auth=(RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET))

# # Create database tables
# with app.app_context():
#     try:
#         db.create_all()
#         print("Database initialized!")
#     except Exception as e:
#         print(f"Error initializing database: {e}")
# @app.route('/')
# def index():
#     return render_template('index.html')

# @app.route('/payment')
# def payment():
#     return render_template('payment.html', razorpay_key_id=RAZORPAY_KEY_ID)

# @app.route('/create_order', methods=['POST'])
# def create_order():
#     data = request.get_json()
#     amount = data.get('amount', 1200)  # Default: ‚Çπ1 in paise

#     order_data = {
#         'amount': amount,
#         'currency': 'INR',
#         'receipt': f'order_rcptid_{data.get("user_id", "guest")}'
#     }

#     try:
#         print("üöÄ Creating Razorpay order with:", order_data)  # Debug log

#         order = razorpay_client.order.create(data=order_data)

#         print("‚úÖ Razorpay order created:", order)  # Debug log

#         return jsonify({
#             'order_id': order['id'],
#             'amount': order['amount'],
#             'currency': order['currency'],
#             'key': RAZORPAY_KEY_ID
#         }), 200

#     except Exception as e:
#         print("‚ùå Razorpay order creation failed:", str(e))  # Error log
#         return jsonify({'error': str(e)}), 500


# @app.route('/verify_payment', methods=['POST'])
# def verify_payment():
#     data = request.get_json()
#     razorpay_order_id = data.get('razorpay_order_id')
#     razorpay_payment_id = data.get('razorpay_payment_id')
#     razorpay_signature = data.get('razorpay_signature')
#     user_data = data.get('user_data')
    
#     if not all([razorpay_order_id, razorpay_payment_id, razorpay_signature, user_data]):
#         return jsonify({'error': 'Missing required payment or user data'}), 400
    
#     # Verify payment signature
#     try:
#         generated_signature = hmac.new(
#             key=RAZORPAY_KEY_SECRET.encode('utf-8'),
#             msg=f"{razorpay_order_id}|{razorpay_payment_id}".encode('utf-8'),
#             digestmod=hashlib.sha256
#         ).hexdigest()
        
#         if generated_signature != razorpay_signature:
#             return jsonify({'error': 'Invalid payment signature'}), 400
        
#         # Save user data to database
#         ig_username = user_data.get('ig_username')
#         full_name = user_data.get('full_name')
#         email = user_data.get('email')
#         phone = user_data.get('phone')
#         state = user_data.get('state')
        
#         if not all([ig_username, full_name, email, phone, state]):
#             return jsonify({'error': 'All user fields are required'}), 400
        
#         user = User(
#             ig_username=ig_username,
#             full_name=full_name,
#             email=email,
#             phone=phone,
#             state=state
#         )
#         db.session.add(user)
#         db.session.commit()
        
#         return jsonify({
#             'status': 'Payment verified and user saved',
#             'user_id': user.id
#         }), 200
#     except Exception as e:
#         db.session.rollback()
#         return jsonify({'error': f'Failed to verify payment or save user: {str(e)}'}), 400

# if __name__ == '__main__':
#     app.run(debug=True)